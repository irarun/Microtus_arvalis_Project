[
  {
    "objectID": "paper1.html",
    "href": "paper1.html",
    "title": "1st paper",
    "section": "",
    "text": "The map below shows the geographic distribution of samples selected for the first round of sequencing.\n\n\nShow the code\nlibrary(leaflet)\nlibrary(leaflet.minicharts)\nlibrary(widgetframe)\nlibrary(sf)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(xfun)\nlibrary(writexl)\nlibrary(tidyverse)\n\n# Read and clean\nraw_lines &lt;- readLines(\"onlyMicrotus_B_MicrotusSamplesV426.txt\", encoding = \"latin1\")\nclean_lines &lt;- iconv(raw_lines, from = \"latin1\", to = \"UTF-8\", sub = \"\")\nwriteLines(clean_lines, \"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\")\nrawTable &lt;- read_tsv(\"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\", locale = locale(encoding = \"UTF-8\"))\n\n# Columns to use\ncols &lt;- c(\"Genus\", \"Species\", \"Samplinglocation\", \"Country\", \"Sample number (on tube or bag)\",\n          \"Individual number\", \"Extraction y/n?\", \"Place of capture\", \"Latitude\", \"Longitude\",\n          \"Specimen-20\", \"DNADNA_.Number.in..20\", \"RNARNA_.Number.in..80\")\nData &lt;- rawTable[, cols]\n\n# Filter species\narvalis_data &lt;- Data %&gt;% filter(Species == \"arvalis\")\n\n# Clean coordinates\narvalis_data$Longitude &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Longitude)\narvalis_data$Latitude &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Latitude)\narvalis_data$Longitude &lt;- as.numeric(as.character(arvalis_data$Longitude))\narvalis_data$Latitude &lt;- as.numeric(as.character(arvalis_data$Latitude))\n\n# Sample lists\nadd_samples &lt;- c(\"MarGBGGo01\",\"MarGBGCh01\",\"MarGBGAe01\", # Guernsey\n                 \"MarFFo01\", \"MarFBe01\", \"MarFVi01\", \"MarFSJ455\", \"MarFSi01\", # continent\n                 \"MarOMDo01\") # Orkney\n\nWangHeckel2025 &lt;- c(\"BSt095\", \"BVe061\", \"FBv02\", \"FCc02\", \"FDa504\", \"FFr549\", \"FGr14\",\n                    \"FMc03\", \"FOg02\", \"FPi555\", \"FSt24\", \"OBSO234\", \"OBWs01\",\n                    \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"ORGs21\", \"ORWa268\",\n                    \"OSaLi257\", \"OSaNe01\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWPg01\")\n\nWang2023 &lt;- c(\"BSt095\", \"BVe061\", \"FDa504\", \"FFr549\", \"FMc03\", \"FPi555\", \"Ft24\",\n              \"FA01\", \"FCh05\", \"FTh497\", \"EMq03\", \"ESa08\", \"ESAv05\", \"FM05\", \"OBSO234\",\n              \"OBWs01\", \"OBWs02\", \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"OMSe194\",\n              \"OMSO221\", \"OMSQ273\", \"ORGs21\", \"ORNe205\", \"ORWa268\", \"OSaLi257\", \"OSaNe01\",\n              \"OSaWh256\", \"OSGr134\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWNe051\", \"OWPg01\",\n              \"CHBo17\", \"CHVa02\", \"ISc01\", \"CZD02\", \"PSr06\", \"RuKo01\", \"DAb06\", \"DWa04\", \"He42\")\n\npublished &lt;- unique(c(WangHeckel2025, Wang2023))\npublished &lt;- paste0(\"Mar\", published)\n\n# Mark published and to-add samples\narvalis_data &lt;- arvalis_data %&gt;%\n  mutate(\n    Published = `Individual number` %in% published,\n    Add_marked = `Individual number` %in% add_samples\n  )\n\n# Assign color based on country group\narvalis_data &lt;- arvalis_data %&gt;%\n  mutate(\n    Country_group_color = case_when(\n      Country %in% c(\"Spain\", \"France\", \"Belgium\", \"Orkney Island\", \"Britain\") ~ \"green\",\n      Country %in% c(\"Switzerland\", \"Italy\") ~ \"darkblue\",\n      Country %in% c(\"Russia\", \"Czech Republic\", \"Poland\") ~ \"orange\",\n      TRUE ~ \"darkred\"\n    )\n  )\n\n\n# Summarise coordinates\ncoords_summary &lt;- arvalis_data %&gt;%\n  filter(!is.na(Latitude), !is.na(Longitude)) %&gt;%\n  group_by(Longitude, Latitude) %&gt;%\n  summarise(\n    sample_count = n(),\n    countries = paste(unique(Country), collapse = \", \"),\n    Location = first(Samplinglocation),\n    color = first(Country_group_color),\n    has_add_sample = any(Add_marked),\n    has_published = any(Published),\n    sample_names = list(`Individual number`),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    samples_colored = paste(sample_names, collapse = \"&lt;br&gt;\")\n  ) %&gt;%\n  ungroup()\n\n# Create leaflet map\nmap &lt;- leaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lat = mean(coords_summary$Latitude), lng = mean(coords_summary$Longitude), zoom = 5)\n\n\n# Add published samples as circles\nmap &lt;- map %&gt;%\n  addCircleMarkers(\n    data = coords_summary %&gt;% filter(has_published),\n    lng = ~Longitude,\n    lat = ~Latitude,\n    color = ~color,\n    radius = 6,\n    weight = 1,\n    opacity = 1,\n    fillOpacity = 1,\n    label = ~Location,\n    popup = ~paste0(\n      \"&lt;b&gt;Coordinates:&lt;/b&gt; \", Latitude, \", \", Longitude, \"&lt;br&gt;\",\n      \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", sample_count, \"&lt;br&gt;\",\n      \"&lt;b&gt;Countries:&lt;/b&gt; \", countries, \"&lt;br&gt;\",\n      \"&lt;b&gt;Location:&lt;/b&gt; \", Location, \"&lt;br&gt;\",\n      \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", samples_colored\n    )\n  )\n\n\nsmall_icon &lt;- makeIcon(\n  iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png\",\n  shadowUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-shadow.png\",\n  iconWidth = 15,   # smaller width (default is 25)\n  iconHeight = 25,  # smaller height (default is 41)\n  iconAnchorX = 7,  # adjust anchor point accordingly (usually half of width)\n  iconAnchorY = 25  # usually equals iconHeight\n)\n\n\n\n# Add add-marked samples as colored markers with popups (no rectangles)\n# We'll use leaflet icons matching colors for markers\nmarker_icons &lt;- list(\n  green = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  blue = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  yellow = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  black = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25))\n\nadd_sample_points &lt;- coords_summary %&gt;% filter(has_add_sample)\n\nfor (i in seq_len(nrow(add_sample_points))) {\n  col &lt;- add_sample_points$color[i]\n  icon &lt;- marker_icons[[col]]\n  popup_html &lt;- paste0(\n    \"&lt;b&gt;Coordinates:&lt;/b&gt; \", add_sample_points$Latitude[i], \", \", add_sample_points$Longitude[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", add_sample_points$sample_count[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Countries:&lt;/b&gt; \", add_sample_points$countries[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Location:&lt;/b&gt; \", add_sample_points$Location[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", add_sample_points$samples_colored[i]\n  )\n  map &lt;- addMarkers(\n    map,\n    lng = add_sample_points$Longitude[i],\n    lat = add_sample_points$Latitude[i],\n    icon = icon,\n    popup = popup_html,\n    label = add_sample_points$Location[i]\n  )\n}\n\n# Add legend manually\nmap &lt;- map %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    colors = c(\"green\", \"darkblue\", \"orange\", \"darkred\"),\n    labels = c(\"Western\", \"Italian\", \"Eastern\", \"Central\"),\n    title = \"Country color\",\n    opacity = 1\n  )\n\n\n\n\nShow the code\nmap\n\n\n\n\n\n\nThe map below shows the geographic distribution of samples selected for the first round of sequencing, as well as those potentially intended for a second round (to be updated).\n\n\nShow the code\nlibrary(leaflet)\nlibrary(leaflet.minicharts)\nlibrary(widgetframe)\nlibrary(sf)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(xfun)\nlibrary(writexl)\nlibrary(tidyverse)\n\n# Read and clean\nraw_lines &lt;- readLines(\"onlyMicrotus_B_MicrotusSamplesV426.txt\", encoding = \"latin1\")\nclean_lines &lt;- iconv(raw_lines, from = \"latin1\", to = \"UTF-8\", sub = \"\")\nwriteLines(clean_lines, \"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\")\nrawTable &lt;- read_tsv(\"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\")\n\n\n# Columns to use\ncols &lt;- c(\"Genus\", \"Species\", \"Samplinglocation\", \"Country\", \"Sample number (on tube or bag)\",\n          \"Individual number\", \"Extraction y/n?\", \"Place of capture\", \"Latitude\", \"Longitude\",\n          \"Specimen-20\", \"DNADNA_.Number.in..20\", \"RNARNA_.Number.in..80\")\nData &lt;- rawTable[, cols]\n\n# Filter species\narvalis_data &lt;- Data %&gt;% filter(Species == \"arvalis\")\n\n# Clean coordinates\narvalis_data$Longitude &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Longitude)\narvalis_data$Latitude &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Latitude)\narvalis_data$Longitude &lt;- as.numeric(as.character(arvalis_data$Longitude))\narvalis_data$Latitude &lt;- as.numeric(as.character(arvalis_data$Latitude))\n\n# Sample lists\nadd_samples &lt;- c(\"MarGBGGo01\",\"MarGBGCh01\",\"MarGBGAe01\", # Guernsey\n                 \"MarFFo01\", \"MarFBe01\", \"MarFVi01\", \"MarFSJ455\", \"MarFSi01\",\n                 \"MarFTh478\", # continent\n                 \"MarOMDo01\", \"MarOMSw01\", \"MarOMWr01\", \"MarOMPs01\") # Orkney\n\nWangHeckel2025 &lt;- c(\"BSt095\", \"BVe061\", \"FBv02\", \"FCc02\", \"FDa504\", \"FFr549\", \"FGr14\",\n                    \"FMc03\", \"FOg02\", \"FPi555\", \"FSt24\", \"OBSO234\", \"OBWs01\",\n                    \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"ORGs21\", \"ORWa268\",\n                    \"OSaLi257\", \"OSaNe01\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWPg01\")\n\nWang2023 &lt;- c(\"BSt095\", \"BVe061\", \"FDa504\", \"FFr549\", \"FMc03\", \"FPi555\", \"Ft24\",\n              \"FA01\", \"FCh05\", \"FTh497\", \"EMq03\", \"ESa08\", \"ESAv05\", \"FM05\", \"OBSO234\",\n              \"OBWs01\", \"OBWs02\", \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"OMSe194\",\n              \"OMSO221\", \"OMSQ273\", \"ORGs21\", \"ORNe205\", \"ORWa268\", \"OSaLi257\", \"OSaNe01\",\n              \"OSaWh256\", \"OSGr134\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWNe051\", \"OWPg01\",\n              \"CHBo17\", \"CHVa02\", \"ISc01\", \"CZD02\", \"PSr06\", \"RuKo01\", \"DAb06\", \"DWa04\", \"He42\")\n\npublished &lt;- unique(c(WangHeckel2025, Wang2023))\npublished &lt;- paste0(\"Mar\", published)\n\n# Mark published and to-add samples\narvalis_data &lt;- arvalis_data %&gt;%\n  mutate(\n    Published = `Individual number` %in% published,\n    Add_marked = `Individual number` %in% add_samples\n  )\n\n# Assign color based on country group\narvalis_data &lt;- arvalis_data %&gt;%\n  mutate(\n    Country_group_color = case_when(\n      Country %in% c(\"Spain\", \"France\", \"Belgium\", \"Orkney Island\", \"Britain\") ~ \"green\",\n      Country %in% c(\"Switzerland\", \"Italy\") ~ \"darkblue\",\n      Country %in% c(\"Russia\", \"Czech Republic\", \"Poland\") ~ \"orange\",\n      TRUE ~ \"darkred\"\n    )\n  )\n\n\n# Summarise coordinates\ncoords_summary &lt;- arvalis_data %&gt;%\n  filter(!is.na(Latitude), !is.na(Longitude)) %&gt;%\n  group_by(Longitude, Latitude) %&gt;%\n  summarise(\n    sample_count = n(),\n    countries = paste(unique(Country), collapse = \", \"),\n    Location = first(Samplinglocation),\n    color = first(Country_group_color),\n    has_add_sample = any(Add_marked),\n    has_published = any(Published),\n    sample_names = list(`Individual number`),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    samples_colored = paste(sample_names, collapse = \"&lt;br&gt;\")\n  ) %&gt;%\n  ungroup()\n\n# Create leaflet map\nmap &lt;- leaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(lat = mean(coords_summary$Latitude), lng = mean(coords_summary$Longitude), zoom = 5)\n\n\n# Add published samples as circles\nmap &lt;- map %&gt;%\n  addCircleMarkers(\n    data = coords_summary %&gt;% filter(has_published),\n    lng = ~Longitude,\n    lat = ~Latitude,\n    color = ~color,\n    radius = 6,\n    weight = 1,\n    opacity = 1,\n    fillOpacity = 1,\n    label = ~Location,\n    popup = ~paste0(\n      \"&lt;b&gt;Coordinates:&lt;/b&gt; \", Latitude, \", \", Longitude, \"&lt;br&gt;\",\n      \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", sample_count, \"&lt;br&gt;\",\n      \"&lt;b&gt;Countries:&lt;/b&gt; \", countries, \"&lt;br&gt;\",\n      \"&lt;b&gt;Location:&lt;/b&gt; \", Location, \"&lt;br&gt;\",\n      \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", samples_colored\n    )\n  )\n\n\nsmall_icon &lt;- makeIcon(\n  iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png\",\n  shadowUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-shadow.png\",\n  iconWidth = 15,   # smaller width (default is 25)\n  iconHeight = 25,  # smaller height (default is 41)\n  iconAnchorX = 7,  # adjust anchor point accordingly (usually half of width)\n  iconAnchorY = 25  # usually equals iconHeight\n)\n\n\n\n# Add add-marked samples as colored markers with popups (no rectangles)\n# We'll use leaflet icons matching colors for markers\nmarker_icons &lt;- list(\n  green = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  blue = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  yellow = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-yellow.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25),\n  black = makeIcon(iconUrl = \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png\", iconWidth = 15, iconHeight = 25, iconAnchorX = 7, iconAnchorY = 25))\n\nadd_sample_points &lt;- coords_summary %&gt;% filter(has_add_sample)\n\nfor (i in seq_len(nrow(add_sample_points))) {\n  col &lt;- add_sample_points$color[i]\n  icon &lt;- marker_icons[[col]]\n  popup_html &lt;- paste0(\n    \"&lt;b&gt;Coordinates:&lt;/b&gt; \", add_sample_points$Latitude[i], \", \", add_sample_points$Longitude[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", add_sample_points$sample_count[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Countries:&lt;/b&gt; \", add_sample_points$countries[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Location:&lt;/b&gt; \", add_sample_points$Location[i], \"&lt;br&gt;\",\n    \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", add_sample_points$samples_colored[i]\n  )\n  map &lt;- addMarkers(\n    map,\n    lng = add_sample_points$Longitude[i],\n    lat = add_sample_points$Latitude[i],\n    icon = icon,\n    popup = popup_html,\n    label = add_sample_points$Location[i]\n  )\n}\n\n# Add legend manually\nmap &lt;- map %&gt;%\n  addLegend(\n    position = \"bottomleft\",\n    colors = c(\"green\", \"darkblue\", \"orange\", \"darkred\"),\n    labels = c(\"Western\", \"Italian\", \"Eastern\", \"Central\"),\n    opacity = 1\n  )\n\n\n\n\nShow the code\nmap"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This project explores the genomics of Microtus arvalis on isolated islands."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site contains info about my project."
  },
  {
    "objectID": "map.html",
    "href": "map.html",
    "title": "All samples",
    "section": "",
    "text": "Below you can find the sample map.\n\n\nShow the code\nlibrary(leaflet)\nlibrary(leaflet.minicharts)\nlibrary(widgetframe)\nlibrary(sf)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(xfun)\nlibrary(writexl)\n\n\n### prepearing the data\n\n# convert lines to UTF-8 (replacing problematic chars)\nraw_lines &lt;- readLines(\"onlyMicrotus_B_MicrotusSamplesV426.txt\", encoding = \"latin1\")\n\nclean_lines &lt;- iconv(raw_lines, from = \"latin1\", to = \"UTF-8\", sub = \"\")\n\n# Save cleaned file\nwriteLines(clean_lines, \"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\")\n\nrawTable &lt;- read_tsv(\"onlyMicrotus_B_MicrotusSamplesV426_cleaned.txt\")\n  #col_types = cols(\n    #Add = col_character(),\n    #Published = col_character(),\n    #.default = col_guess()) # let other columns be guessed\n\n\n#nrow(rawTable)\n#colnames(rawTable)\ncols &lt;- c(\"Genus\", \"Species\", \"Samplinglocation\", \"Country\", \"Sample number (on tube or bag)\", \"Individual number\", \"Extraction y/n?\", \"Place of capture\", \"Latitude\", \"Longitude\", \"Specimen-20\", \"DNADNA_.Number.in..20\", \"RNARNA_.Number.in..80\")\n# Other cols: \"Microsat\", \"Cytochrom b\", \"GewebeRack\", \"Number in Fridge oder -20C oder -80C\", \"Lung.Tissue\", \"Positive? (TULV)\", \"Published\")\n\nData &lt;- rawTable[, cols]\n#View(Data)\n\n# filter data for species \"arvalis\"\narvalis_data &lt;- Data %&gt;% filter(Species == \"arvalis\")\n\n# replace non-breaking spaces (\\u00A0) and any spaces around numbers in Longitude and Latitude\narvalis_data$Longitude &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Longitude)\narvalis_data$Latitude  &lt;- gsub(\"\\u00A0\", \"\", arvalis_data$Latitude)\n# Convert coordinates to numeric if needed\narvalis_data$Longitude &lt;- as.numeric(as.character(arvalis_data$Longitude))\narvalis_data$Latitude  &lt;- as.numeric(as.character(arvalis_data$Latitude))\n#View(arvalis_data)\n\n# samples to add (color in red samples from locations that I plan to sequence):\nadd_samples &lt;- c(\"MarFSi01\",\"MarFSJ456\", \"MarFTr01\",\"MarFCm04\",\n                 \"MarFCm01\",\"MarFM05\",\n                 \"MarGBGGo01\",\"MarGBGCh01\",\"MarGBGAt04\",\"MarGBGAe01\", \n                 \"MarFFo01\", \"MarFBe01\", \"MarFVi01\",\n                 \"MarOMDo01\", \"MarOMGr01\", \"MarOMSw01\", \"MarOMWr01\", \"MarOMPs01\")\n\n# already published samples\nWangHeckel2025 &lt;- c(\"BSt095\", \"BVe061\", \"FBv02\", \"FCc02\", \"FDa504\", \"FFr549\", \"FGr14\",\n                    \"FGr14\", \"FMc03\", \"FOg02\", \"FPi555\", \"FSt24\", \"OBSO234\", \"OBWs01\",\n               \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"ORGs21\", \"ORWa268\",\n               \"OSaLi257\", \"OSaNe01\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWPg01\")\n\n\n\n\nWang2023 &lt;- c(\"BSt095\", \"BVe061\", \"FDa504\", \"FFr549\", \"FMc03\", \"FPi555\", \"Ft24\",\n               \"FA01\", \"FCh05\", \"FTh497\", \"EMq03\", \"ESa08\", \"ESAv05\", \"FM05\", \"OBSO234\",\n               \"OBWs01\", \"OBWs02\", \"OEOs14\", \"OEOs15\", \"OMBr149\", \"OMHo277\", \"OMSe194\",\n               \"OMSO221\", \"OMSQ273\", \"ORGs21\", \"ORNe205\", \"ORWa268\", \"OSaLi257\", \"OSaNe01\",\n               \"OSaWh256\", \"OSGr134\", \"OSJC01\", \"OSWi166\", \"OWLs033\", \"OWNe051\", \"OWPg01\",\n               \"CHBo17\", \"CHVa02\", \"ISc01\", \"CZD02\", \"PSr06\", \"RuKo01\", \"DAb06\", \"DWa04\", \"He42\")\n\n# all published samples\npublished &lt;- unique(c(WangHeckel2025, Wang2023))\npublished &lt;- paste0(\"Mar\", published)\npublished\n\narvalis_data &lt;- arvalis_data %&gt;%\n  mutate(\n    Published = `Individual number` %in% published,\n    Add_marked = `Individual number` %in% add_samples)\n#View(arvalis_data)\n\n# summarise by coordinate and assign color priority\ncoords_summary &lt;- arvalis_data %&gt;%\n  filter(!is.na(Latitude), !is.na(Longitude)) %&gt;%\n  group_by(Longitude, Latitude) %&gt;%\n  summarise(\n    sample_count = n(),\n    countries = paste(unique(Country), collapse = \", \"),\n    samples_info = list(\n      tibble(\n        sample_name = `Individual number`,\n        dna = DNADNA_.Number.in..20,\n        rna = RNARNA_.Number.in..80,\n        Frozen_body = `Specimen-20`)),\n    Location = Samplinglocation,\n    has_add_sample = any(Add_marked),\n    has_published = any(Published),\n    color = case_when(\n      has_add_sample ~ \"red\",\n      has_published ~ \"green\",\n      TRUE ~ \"darkgrey\"),\n  .groups = \"drop\")\n\n#View(coords_summary)\n\n# color each sample based on presence/absence of frozen specimen or DNA/RNA\ncolor_sample_name &lt;- function(sample_name, Frozen_body) {\n#  has_dna &lt;- !is.na(dna) & dna != \"\"\n#  has_rna &lt;- !is.na(rna) & rna != \"\"\n  has_body &lt;- !is.na(Frozen_body) && Frozen_body != \"\"\n  \n  ### change here so that frozen body is visible\n  color &lt;- if (has_body) {\"blue\"}\n#    if (has_dna & has_rna) {\"orange\"}  \n#    else if (has_dna) {\"blue\"}\n#    else if (has_rna) {\"violet\"}\n    else {\"black\"}\n  paste0('&lt;span style=\"color:', color, ';\"&gt;', sample_name, '&lt;/span&gt;')}\n\ncoords_summary &lt;- coords_summary %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    samples_colored = paste(\n      sapply(1:nrow(samples_info), function(i) {\n        color_sample_name(\n          samples_info$sample_name[i],\n          samples_info$Frozen_body[i])}),\n#          samples_info$dna[i],\n#          samples_info$rna[i]\n      collapse = \"&lt;br&gt;\")) %&gt;%\n  ungroup()\n\n# split into three color groups\nred_dots &lt;- coords_summary %&gt;% filter(color == \"red\")\ngreen_dots &lt;- coords_summary %&gt;% filter(color == \"green\")\ngrey_dots &lt;- coords_summary %&gt;% filter(color == \"darkgrey\")\n\n\n### creating the map\n\n# base map\nmap &lt;- leaflet() %&gt;%\n  setView(lat = 49.76666667, lng = 0.516666667, zoom = 7) %&gt;%\n  addTiles()\n\n# add grey dots first (bottom layer)\nmap &lt;- map %&gt;%\n  addCircleMarkers(\n    data = grey_dots,\n    lng = ~Longitude, lat = ~Latitude,\n    label = ~Location,\n    color = \"darkgrey\",\n    radius = ~5,  # + sample_count / 20,\n    weight = 1, opacity = 1, fillOpacity = 0.5,\n    popup = ~paste0(\n      \"&lt;b&gt;Coordinates:&lt;/b&gt; \", Latitude, \", \", Longitude, \"&lt;br&gt;\",\n      \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", sample_count, \"&lt;br&gt;\",\n      \"&lt;b&gt;Country:&lt;/b&gt; \", countries, \"&lt;br&gt;\",\n      \"&lt;b&gt;Location:&lt;/b&gt; \", Location, \"&lt;br&gt;\",\n      \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", samples_colored))\n#label = ~paste0(\"Lat: \", Latitude, \", Lon: \", Longitude)\n\n# add green dots (middle layer)\nmap &lt;- map %&gt;%\n  addCircleMarkers(\n    data = green_dots,\n    lng = ~Longitude, lat = ~Latitude,\n    label = ~Location,\n    color = \"green\",\n    radius = ~5,  # + sample_count / 20,\n    weight = 1, opacity = 1, fillOpacity = 0.8,\n    popup = ~paste0(\n      \"&lt;b&gt;Coordinates:&lt;/b&gt; \", Latitude, \", \", Longitude, \"&lt;br&gt;\",\n      \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", sample_count, \"&lt;br&gt;\",\n      \"&lt;b&gt;Countries:&lt;/b&gt; \", countries, \"&lt;br&gt;\",\n      \"&lt;b&gt;Location:&lt;/b&gt; \", Location, \"&lt;br&gt;\",\n      \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", samples_colored))\n\n# add red dots last (top layer)\nmap &lt;- map %&gt;%\n  addCircleMarkers(\n    data = red_dots,\n    lng = ~Longitude, lat = ~Latitude,\n    label = ~Location,\n    color = \"red\",\n    radius = ~5, # + sample_count / 20\n    weight = 1, opacity = 1, fillOpacity = 0.9,\n    popup = ~paste0(\n      \"&lt;b&gt;Coordinates:&lt;/b&gt; \", Latitude, \", \", Longitude, \"&lt;br&gt;\",\n      \"&lt;b&gt;Samples at this location:&lt;/b&gt; \", sample_count, \"&lt;br&gt;\",\n      \"&lt;b&gt;Countries:&lt;/b&gt; \", countries, \"&lt;br&gt;\",\n      \"&lt;b&gt;Location:&lt;/b&gt; \", Location, \"&lt;br&gt;\",\n      \"&lt;b&gt;Sample IDs:&lt;/b&gt;&lt;br&gt;\", samples_colored))\n\n# add legends\nmap &lt;- map %&gt;%\n   addLegend(\n    position = \"bottomleft\",\n    colors = c(\"darkgrey\", \"green\", \"red\"),\n    labels = c(\"Sampled locations\", \"Published (2023/2025)\", \"Samples to add\"),\n    title = \"Dot color legend\",\n    opacity = 1) %&gt;%\n  addLegend(\n    position = \"topright\",\n    colors = \"blue\",  # colors = c(\"blue\", \"violet\", \"orange\"),\n    labels = \"Frozen specimen at -20\",  # labels = c(\"DNA extracted\", \"RNA extracted\", \"DNA & RNA extracted\"),\n    title = \"Sample ID color legend\",\n    opacity = 1)\n\n\n\n\nShow the code\nmap"
  }
]